//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DefineAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DefineAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""ARPlacingState"",
            ""id"": ""fd8d7716-c5c2-40d0-ba35-783f8c511058"",
            ""actions"": [
                {
                    ""name"": ""PlacingObject"",
                    ""type"": ""Button"",
                    ""id"": ""9bbe1b28-5141-442d-8970-805b008fe3f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangingObject"",
                    ""type"": ""Button"",
                    ""id"": ""a64f9f6d-3e18-4212-8161-0f148dcc4e51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteObject"",
                    ""type"": ""Button"",
                    ""id"": ""e691fbd2-4c9c-44bd-a0a4-285dc8eea34a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""597861d1-001c-4743-84e5-10f5b20a25e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3dceacbb-d01c-475a-98e6-6b06f19d2c68"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacingObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7316e52-9653-4151-a40b-e9c81f1c968f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangingObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c41dc0e-773a-417d-93bd-38e318e826e2"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""028255e3-56d9-43d3-ad06-38b21aaa1f4f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ARSelectingState"",
            ""id"": ""f4e403f3-111f-4d52-9dea-457832e8ca46"",
            ""actions"": [
                {
                    ""name"": ""Easy"",
                    ""type"": ""Button"",
                    ""id"": ""6f0670f9-593d-41cb-98a4-4c3384118aed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Medium"",
                    ""type"": ""Button"",
                    ""id"": ""2e339b4a-eb50-44e2-9907-482ec742a3c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hard"",
                    ""type"": ""Button"",
                    ""id"": ""b9a1669c-9cd3-4e51-a197-97e0ba72cade"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""d7b92c4a-c8ac-45ae-bfb3-eeeef5f418ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca99e280-26ff-49df-88cc-3b9623f0e901"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Easy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b4cc2cd-ae64-498f-825b-356be08dddff"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Medium"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""382652ef-2eb3-4958-96fe-3cac9e55a06b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a108346-977d-4241-9351-03d1c92d9747"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BowlingBall"",
            ""id"": ""a81951ac-e117-4806-8482-2b7640e7f7f5"",
            ""actions"": [
                {
                    ""name"": ""Throwing"",
                    ""type"": ""Value"",
                    ""id"": ""368234c0-40c0-4f75-ae3b-6e181cf658d6"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Strafing"",
                    ""type"": ""Value"",
                    ""id"": ""ad77d8c1-0cb9-4882-8896-019091cf8658"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b83dabe9-ed6c-44b1-b75f-5087c2f4235b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7c650bd5-4a92-411c-a976-703b82330124"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwing"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""449f77ce-ddd9-4693-a066-c0a164c7fd97"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6d838d4d-5e5f-415e-8e79-a4ad8b3e72b1"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4c6af87f-bfe1-4831-9554-44f2e510e046"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6b075bc8-1674-4767-9e60-86a6863f0d54"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""75de0f58-932f-4b07-a4db-c5f9ee20cdec"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafing"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6c3a61f5-b869-472f-81ad-aa00d35d8ef6"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c0a5119e-40a1-43db-974a-ca11c7dd740a"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49f06ee8-85ad-4634-a7bd-4c9ab6eeff97"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c3042a6-0481-4d04-8a13-e6d2ce85f41e"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile On-Screen"",
            ""bindingGroup"": ""Mobile On-Screen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ARPlacingState
        m_ARPlacingState = asset.FindActionMap("ARPlacingState", throwIfNotFound: true);
        m_ARPlacingState_PlacingObject = m_ARPlacingState.FindAction("PlacingObject", throwIfNotFound: true);
        m_ARPlacingState_ChangingObject = m_ARPlacingState.FindAction("ChangingObject", throwIfNotFound: true);
        m_ARPlacingState_DeleteObject = m_ARPlacingState.FindAction("DeleteObject", throwIfNotFound: true);
        m_ARPlacingState_StartGame = m_ARPlacingState.FindAction("StartGame", throwIfNotFound: true);
        // ARSelectingState
        m_ARSelectingState = asset.FindActionMap("ARSelectingState", throwIfNotFound: true);
        m_ARSelectingState_Easy = m_ARSelectingState.FindAction("Easy", throwIfNotFound: true);
        m_ARSelectingState_Medium = m_ARSelectingState.FindAction("Medium", throwIfNotFound: true);
        m_ARSelectingState_Hard = m_ARSelectingState.FindAction("Hard", throwIfNotFound: true);
        m_ARSelectingState_Restart = m_ARSelectingState.FindAction("Restart", throwIfNotFound: true);
        // BowlingBall
        m_BowlingBall = asset.FindActionMap("BowlingBall", throwIfNotFound: true);
        m_BowlingBall_Throwing = m_BowlingBall.FindAction("Throwing", throwIfNotFound: true);
        m_BowlingBall_Strafing = m_BowlingBall.FindAction("Strafing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ARPlacingState
    private readonly InputActionMap m_ARPlacingState;
    private List<IARPlacingStateActions> m_ARPlacingStateActionsCallbackInterfaces = new List<IARPlacingStateActions>();
    private readonly InputAction m_ARPlacingState_PlacingObject;
    private readonly InputAction m_ARPlacingState_ChangingObject;
    private readonly InputAction m_ARPlacingState_DeleteObject;
    private readonly InputAction m_ARPlacingState_StartGame;
    public struct ARPlacingStateActions
    {
        private @DefineAction m_Wrapper;
        public ARPlacingStateActions(@DefineAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlacingObject => m_Wrapper.m_ARPlacingState_PlacingObject;
        public InputAction @ChangingObject => m_Wrapper.m_ARPlacingState_ChangingObject;
        public InputAction @DeleteObject => m_Wrapper.m_ARPlacingState_DeleteObject;
        public InputAction @StartGame => m_Wrapper.m_ARPlacingState_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_ARPlacingState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARPlacingStateActions set) { return set.Get(); }
        public void AddCallbacks(IARPlacingStateActions instance)
        {
            if (instance == null || m_Wrapper.m_ARPlacingStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ARPlacingStateActionsCallbackInterfaces.Add(instance);
            @PlacingObject.started += instance.OnPlacingObject;
            @PlacingObject.performed += instance.OnPlacingObject;
            @PlacingObject.canceled += instance.OnPlacingObject;
            @ChangingObject.started += instance.OnChangingObject;
            @ChangingObject.performed += instance.OnChangingObject;
            @ChangingObject.canceled += instance.OnChangingObject;
            @DeleteObject.started += instance.OnDeleteObject;
            @DeleteObject.performed += instance.OnDeleteObject;
            @DeleteObject.canceled += instance.OnDeleteObject;
            @StartGame.started += instance.OnStartGame;
            @StartGame.performed += instance.OnStartGame;
            @StartGame.canceled += instance.OnStartGame;
        }

        private void UnregisterCallbacks(IARPlacingStateActions instance)
        {
            @PlacingObject.started -= instance.OnPlacingObject;
            @PlacingObject.performed -= instance.OnPlacingObject;
            @PlacingObject.canceled -= instance.OnPlacingObject;
            @ChangingObject.started -= instance.OnChangingObject;
            @ChangingObject.performed -= instance.OnChangingObject;
            @ChangingObject.canceled -= instance.OnChangingObject;
            @DeleteObject.started -= instance.OnDeleteObject;
            @DeleteObject.performed -= instance.OnDeleteObject;
            @DeleteObject.canceled -= instance.OnDeleteObject;
            @StartGame.started -= instance.OnStartGame;
            @StartGame.performed -= instance.OnStartGame;
            @StartGame.canceled -= instance.OnStartGame;
        }

        public void RemoveCallbacks(IARPlacingStateActions instance)
        {
            if (m_Wrapper.m_ARPlacingStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IARPlacingStateActions instance)
        {
            foreach (var item in m_Wrapper.m_ARPlacingStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ARPlacingStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ARPlacingStateActions @ARPlacingState => new ARPlacingStateActions(this);

    // ARSelectingState
    private readonly InputActionMap m_ARSelectingState;
    private List<IARSelectingStateActions> m_ARSelectingStateActionsCallbackInterfaces = new List<IARSelectingStateActions>();
    private readonly InputAction m_ARSelectingState_Easy;
    private readonly InputAction m_ARSelectingState_Medium;
    private readonly InputAction m_ARSelectingState_Hard;
    private readonly InputAction m_ARSelectingState_Restart;
    public struct ARSelectingStateActions
    {
        private @DefineAction m_Wrapper;
        public ARSelectingStateActions(@DefineAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Easy => m_Wrapper.m_ARSelectingState_Easy;
        public InputAction @Medium => m_Wrapper.m_ARSelectingState_Medium;
        public InputAction @Hard => m_Wrapper.m_ARSelectingState_Hard;
        public InputAction @Restart => m_Wrapper.m_ARSelectingState_Restart;
        public InputActionMap Get() { return m_Wrapper.m_ARSelectingState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ARSelectingStateActions set) { return set.Get(); }
        public void AddCallbacks(IARSelectingStateActions instance)
        {
            if (instance == null || m_Wrapper.m_ARSelectingStateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ARSelectingStateActionsCallbackInterfaces.Add(instance);
            @Easy.started += instance.OnEasy;
            @Easy.performed += instance.OnEasy;
            @Easy.canceled += instance.OnEasy;
            @Medium.started += instance.OnMedium;
            @Medium.performed += instance.OnMedium;
            @Medium.canceled += instance.OnMedium;
            @Hard.started += instance.OnHard;
            @Hard.performed += instance.OnHard;
            @Hard.canceled += instance.OnHard;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
        }

        private void UnregisterCallbacks(IARSelectingStateActions instance)
        {
            @Easy.started -= instance.OnEasy;
            @Easy.performed -= instance.OnEasy;
            @Easy.canceled -= instance.OnEasy;
            @Medium.started -= instance.OnMedium;
            @Medium.performed -= instance.OnMedium;
            @Medium.canceled -= instance.OnMedium;
            @Hard.started -= instance.OnHard;
            @Hard.performed -= instance.OnHard;
            @Hard.canceled -= instance.OnHard;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
        }

        public void RemoveCallbacks(IARSelectingStateActions instance)
        {
            if (m_Wrapper.m_ARSelectingStateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IARSelectingStateActions instance)
        {
            foreach (var item in m_Wrapper.m_ARSelectingStateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ARSelectingStateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ARSelectingStateActions @ARSelectingState => new ARSelectingStateActions(this);

    // BowlingBall
    private readonly InputActionMap m_BowlingBall;
    private List<IBowlingBallActions> m_BowlingBallActionsCallbackInterfaces = new List<IBowlingBallActions>();
    private readonly InputAction m_BowlingBall_Throwing;
    private readonly InputAction m_BowlingBall_Strafing;
    public struct BowlingBallActions
    {
        private @DefineAction m_Wrapper;
        public BowlingBallActions(@DefineAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throwing => m_Wrapper.m_BowlingBall_Throwing;
        public InputAction @Strafing => m_Wrapper.m_BowlingBall_Strafing;
        public InputActionMap Get() { return m_Wrapper.m_BowlingBall; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BowlingBallActions set) { return set.Get(); }
        public void AddCallbacks(IBowlingBallActions instance)
        {
            if (instance == null || m_Wrapper.m_BowlingBallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BowlingBallActionsCallbackInterfaces.Add(instance);
            @Throwing.started += instance.OnThrowing;
            @Throwing.performed += instance.OnThrowing;
            @Throwing.canceled += instance.OnThrowing;
            @Strafing.started += instance.OnStrafing;
            @Strafing.performed += instance.OnStrafing;
            @Strafing.canceled += instance.OnStrafing;
        }

        private void UnregisterCallbacks(IBowlingBallActions instance)
        {
            @Throwing.started -= instance.OnThrowing;
            @Throwing.performed -= instance.OnThrowing;
            @Throwing.canceled -= instance.OnThrowing;
            @Strafing.started -= instance.OnStrafing;
            @Strafing.performed -= instance.OnStrafing;
            @Strafing.canceled -= instance.OnStrafing;
        }

        public void RemoveCallbacks(IBowlingBallActions instance)
        {
            if (m_Wrapper.m_BowlingBallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBowlingBallActions instance)
        {
            foreach (var item in m_Wrapper.m_BowlingBallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BowlingBallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BowlingBallActions @BowlingBall => new BowlingBallActions(this);
    private int m_MobileOnScreenSchemeIndex = -1;
    public InputControlScheme MobileOnScreenScheme
    {
        get
        {
            if (m_MobileOnScreenSchemeIndex == -1) m_MobileOnScreenSchemeIndex = asset.FindControlSchemeIndex("Mobile On-Screen");
            return asset.controlSchemes[m_MobileOnScreenSchemeIndex];
        }
    }
    public interface IARPlacingStateActions
    {
        void OnPlacingObject(InputAction.CallbackContext context);
        void OnChangingObject(InputAction.CallbackContext context);
        void OnDeleteObject(InputAction.CallbackContext context);
        void OnStartGame(InputAction.CallbackContext context);
    }
    public interface IARSelectingStateActions
    {
        void OnEasy(InputAction.CallbackContext context);
        void OnMedium(InputAction.CallbackContext context);
        void OnHard(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
    }
    public interface IBowlingBallActions
    {
        void OnThrowing(InputAction.CallbackContext context);
        void OnStrafing(InputAction.CallbackContext context);
    }
}
